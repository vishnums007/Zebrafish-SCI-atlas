//This macro is designed to count cell nuclei in an image and determine if those nuclei 
//correlate with other markers of interest in the same image.

//v1-4 - code clean-up
//v1-3 - the user can choose to use the same threshold for each image or set a custom threshold for each image.
//v1-2 - the user selects a manual threshold to apply to each image. 

//Housekeeping
dir = getDirectory("Select the folder containing the images you want to analyze.");
dir2 = dir + "Results";
File.makeDirectory(dir2);
dir2 = dir2 + "/";
roiManager("reset");
run("Colors...", "foreground=black background=white selection=yellow");
run("Set Measurements...", "mean centroid display redirect=None decimal=3");
open_images = getList("image.titles");
for (j=0; j<open_images.length; j++) {
	close();
}
setOption("BlackBackground", false);
//Get a list of the images to analyze
list=newArray(0);
files = getFileList(dir);
for(i=0;i<files.length;i++){
	if(endsWith(files[i],".czi")){
		list=Array.concat(list,files[i]);
	}
}
//Open first image to name channels
filename=dir+list[1];
setBatchMode(true);
run("Bio-Formats", "open=filename autoscale color_mode=Default rois_import=[ROI manager] view=Hyperstack stack_order=XYCZT");
Stack.getDimensions(width, height, channels, slices, frames);
close();
setBatchMode(false);
//Identify channels...
names=newArray(channels);
Dialog.create("");
Dialog.addMessage("Identify the marker used in each channel:");
for (i=1;i<=channels;i++){
	label="C"+i+":";
	Dialog.addString(label, "");
}
Dialog.show();
for (i=0;i<channels;i++){
	names[i]=Dialog.getString();
}
//Identify the channel containing nuclei
Dialog.create("");
Dialog.addMessage("Which channel contains nuclei (DAPI, Hoechst)?");
Dialog.addChoice("Type:", names);	
Dialog.show();
nuclei=Dialog.getChoice();
temp=indexOfArray(names,nuclei);
nuclei="C"+(temp[0]+1);
//Identify the channels to be overlayed...
overlay_channel=newArray();
overlay_name=newArray();
Dialog.create("");
Dialog.addMessage("Which channels contain the markers you want to overlay with the nuclei?");
for (i=0;i<channels;i++){
	Dialog.addCheckbox(names[i], false);
}	
Dialog.show();
for (i=0;i<channels;i++){
	temp=Dialog.getCheckbox();
	if (temp==1) {
		temp3="C"+(i+1);
		overlay_channel=Array.concat(overlay_channel,temp3);
		overlay_name=Array.concat(overlay_name,names[i]);		
	}
}
//Choose same or differenct threshold
Dialog.create("");
Dialog.addMessage("Do you want to use the same custom threshold for each image or \na different custom threshold for each image:");
items = newArray("Same Threshold", "Different Threshold");
Dialog.addRadioButtonGroup("", items, 1, 1, "Same Threshold");
Dialog.show();
if(Dialog.getRadioButton=="Same Threshold"){choice=true;}else{choice=false;}


//Start Analysis...
min2=newArray(overlay_channel.length);
max2=newArray(overlay_channel.length);
same=false;
for(i=0;i<list.length;i++){
	//Open next image in series
	roiManager("reset");
	filename=dir+list[i];
	run("Bio-Formats", "open=filename autoscale color_mode=Default rois_import=[ROI manager] view=Hyperstack stack_order=XYCZT");
	Stack.getDimensions(width, height, channels, slices, frames);
	//Skip the image if it is a z-stack
	if (slices>1){
		close();
		continue;
	}
	dotIndex = indexOf(list[i], ".czi");
	filename=substring(list[i], 0, dotIndex);
	run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");	
	//Identify nuclei
	run("Split Channels");
	run("Clear Results");
	temp=nuclei+"-"+list[i];
	selectWindow(temp);
	setTool("point");
	waitForUser("Click the center of the central canal and press OK");
	run("Measure");
	midline=getResult("Y",0);
	run("Select None");
	setTool("polygon");
	waitForUser("Draw a polygon around the area you want to analyze and press OK.\n(Note: The ROI can be drawn on any channel)");
	roiManager("add");
	selectWindow(temp);
	roiManager("select", 0);
	roiManager("reset");
	run("ITCN ");
	setTool("Paintbrush Tool");
	call("ij.plugin.tool.BrushTool.setBrushWidth",2);
	waitForUser("Adjust and test the parameters until you're satisfied with the nuclei count and then press OK.\n(Note: Click on any extra points to remove them.)");
	temp="Results "+nuclei+"-"+list[i];
	open_images = getList("image.titles");
	//Throw a warning if you accidentally click OK without first clicking count.
	exists=0;
	for(j=0;j<open_images.length;j++){
		if(startsWith(open_images[j],temp)){
			exists=1;
		}
	}
	if (exists == 0) {
		waitForUser("Oops! You must click \"Count\" in the ITCN nuclei counter before proceding.");
	}
	selectWindow(temp);
	// Color Thresholder 2.0.0-rc-69/1.52i, autogenerated macro
	setBatchMode(true);
	min=newArray(3);
	max=newArray(3);
	filter=newArray(3);
	selectWindow(temp);
	a=getTitle();
	run("RGB Stack");
	run("Convert Stack to Images");
	selectWindow("Red");
	rename("0");
	selectWindow("Green");
	rename("1");
	selectWindow("Blue");
	rename("2");
	min[0]=163;
	max[0]=255;
	filter[0]="pass";
	min[1]=0;
	max[1]=0;
	filter[1]="pass";
	min[2]=0;
	max[2]=0;
	filter[2]="pass";
	for (j=0;j<3;j++){
	  selectWindow(""+j);
	  setThreshold(min[j], max[j]);
	  run("Convert to Mask");
	  if (filter[j]=="stop")  run("Invert");
	}
	imageCalculator("AND create", "0","1");
	imageCalculator("AND create", "Result of 0","2");
	for (j=0;j<3;j++){
	  selectWindow(""+j);
	  close();
	}
	selectWindow("Result of 0");
	close();
	selectWindow("Result of Result of 0");
	rename(a);
	// Colour Thresholding-------------
	setOption("BlackBackground", false);
	run("Make Binary");
	run("Analyze Particles...", "size=0-2 add");
	close();
	setBatchMode(false);
	for (j=0;j<overlay_channel.length;j++){
		temp=overlay_channel[j]+"-"+list[i];
		run("Clear Results");
		selectWindow(temp);
		run("Threshold...");
		setAutoThreshold("Default dark");
		call("ij.plugin.frame.ThresholdAdjuster.setMode", "Red");
		if (same==false){
			waitForUser("Set the desired threshold and press OK."); 
			getThreshold(min2[j], max2[j]);
		}
		setThreshold(min2[j], max2[j]);
		call("ij.plugin.frame.ThresholdAdjuster.setMode", "B&W");
		run("Convert to Mask");
		roiManager("Show All without labels");
		roiManager("Measure");
		run("Flatten");
		temp=dir2+filename+"_"+overlay_name[j]+".tif";
		saveAs("Tiff", temp);
		for (k=0; k<getValue("results.count");k++){
			temp=getResult("Y",k);
			if (temp>midline){setResult("Position",k,"Ventral");}
			else {setResult("Position",k,"Dorsal");}		
		}
		updateResults();
		temp=dir2+filename+"_"+overlay_name[j]+".csv";
		saveAs("Results", temp);
		close();
		close();
	}
	same=choice;
 	open_images = getList("image.titles");
	for (j=0; j<open_images.length; j++) {
		close();
	}
}

function indexOfArray(array, value) { 
    count=0; 
    for (i=0; i<lengthOf(array); i++) { 
        if (array[i]==value) { 
            count++; 
        } 
    } 
    if (count>0) { 
        indices=newArray(count); 
        count=0; 
        for (i=0; i<lengthOf(array); i++) { 
            if (array[i]==value) { 
                indices[count]=i; 
                count++; 
            } 
        } 
        return indices;
    }
}